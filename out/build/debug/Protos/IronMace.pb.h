// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: IronMace.proto
// Protobuf C++ Version: 5.29.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_IronMace_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_IronMace_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_IronMace_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_IronMace_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_IronMace_2eproto;
namespace DC {
namespace Packet {
class IronMace_Login;
struct IronMace_LoginDefaultTypeInternal;
extern IronMace_LoginDefaultTypeInternal _IronMace_Login_default_instance_;
class IronMace_Login_Res;
struct IronMace_Login_ResDefaultTypeInternal;
extern IronMace_Login_ResDefaultTypeInternal _IronMace_Login_Res_default_instance_;
class IronMace_Token;
struct IronMace_TokenDefaultTypeInternal;
extern IronMace_TokenDefaultTypeInternal _IronMace_Token_default_instance_;
class IronMace_Token_Res;
struct IronMace_Token_ResDefaultTypeInternal;
extern IronMace_Token_ResDefaultTypeInternal _IronMace_Token_Res_default_instance_;
}  // namespace Packet
}  // namespace DC
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace DC {
namespace Packet {
enum IronMace_Login_Res_IronMace_Login_Result : int {
  IronMace_Login_Res_IronMace_Login_Result_NONE = 0,
  IronMace_Login_Res_IronMace_Login_Result_SUCCESS = 1,
  IronMace_Login_Res_IronMace_Login_Result_FAIL_NOT_FOUND_ACCOUNT = 100,
  IronMace_Login_Res_IronMace_Login_Result_FAIL_WRONG_PASSWORD = 101,
  IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Res_IronMace_Login_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Res_IronMace_Login_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IronMace_Login_Res_IronMace_Login_Result_IsValid(int value);
extern const uint32_t IronMace_Login_Res_IronMace_Login_Result_internal_data_[];
constexpr IronMace_Login_Res_IronMace_Login_Result IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Result_MIN = static_cast<IronMace_Login_Res_IronMace_Login_Result>(0);
constexpr IronMace_Login_Res_IronMace_Login_Result IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Result_MAX = static_cast<IronMace_Login_Res_IronMace_Login_Result>(101);
constexpr int IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Result_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
IronMace_Login_Res_IronMace_Login_Result_descriptor();
template <typename T>
const std::string& IronMace_Login_Res_IronMace_Login_Result_Name(T value) {
  static_assert(std::is_same<T, IronMace_Login_Res_IronMace_Login_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IronMace_Login_Result_Name().");
  return ::google::protobuf::internal::NameOfEnum(IronMace_Login_Res_IronMace_Login_Result_descriptor(), value);
}
inline bool IronMace_Login_Res_IronMace_Login_Result_Parse(absl::string_view name, IronMace_Login_Res_IronMace_Login_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IronMace_Login_Res_IronMace_Login_Result>(
      IronMace_Login_Res_IronMace_Login_Result_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IronMace_Token_Res final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DC.Packet.IronMace_Token_Res) */ {
 public:
  inline IronMace_Token_Res() : IronMace_Token_Res(nullptr) {}
  ~IronMace_Token_Res() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IronMace_Token_Res(
      ::google::protobuf::internal::ConstantInitialized);

  inline IronMace_Token_Res(const IronMace_Token_Res& from) : IronMace_Token_Res(nullptr, from) {}
  inline IronMace_Token_Res(IronMace_Token_Res&& from) noexcept
      : IronMace_Token_Res(nullptr, std::move(from)) {}
  inline IronMace_Token_Res& operator=(const IronMace_Token_Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline IronMace_Token_Res& operator=(IronMace_Token_Res&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IronMace_Token_Res& default_instance() {
    return *internal_default_instance();
  }
  static inline const IronMace_Token_Res* internal_default_instance() {
    return reinterpret_cast<const IronMace_Token_Res*>(
        &_IronMace_Token_Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(IronMace_Token_Res& a, IronMace_Token_Res& b) { a.Swap(&b); }
  inline void Swap(IronMace_Token_Res* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IronMace_Token_Res* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IronMace_Token_Res* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<IronMace_Token_Res>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IronMace_Token_Res& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IronMace_Token_Res& from) { IronMace_Token_Res::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IronMace_Token_Res* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DC.Packet.IronMace_Token_Res"; }

 protected:
  explicit IronMace_Token_Res(::google::protobuf::Arena* arena);
  IronMace_Token_Res(::google::protobuf::Arena* arena, const IronMace_Token_Res& from);
  IronMace_Token_Res(::google::protobuf::Arena* arena, IronMace_Token_Res&& from) noexcept
      : IronMace_Token_Res(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTokenFieldNumber = 2,
  };
  // string token = 2;
  void clear_token() ;
  const std::string& token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* value);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // @@protoc_insertion_point(class_scope:DC.Packet.IronMace_Token_Res)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IronMace_Token_Res_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IronMace_Token_Res& from_msg);
    ::google::protobuf::internal::ArenaStringPtr token_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IronMace_2eproto;
};
// -------------------------------------------------------------------

class IronMace_Token final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DC.Packet.IronMace_Token) */ {
 public:
  inline IronMace_Token() : IronMace_Token(nullptr) {}
  ~IronMace_Token() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IronMace_Token(
      ::google::protobuf::internal::ConstantInitialized);

  inline IronMace_Token(const IronMace_Token& from) : IronMace_Token(nullptr, from) {}
  inline IronMace_Token(IronMace_Token&& from) noexcept
      : IronMace_Token(nullptr, std::move(from)) {}
  inline IronMace_Token& operator=(const IronMace_Token& from) {
    CopyFrom(from);
    return *this;
  }
  inline IronMace_Token& operator=(IronMace_Token&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IronMace_Token& default_instance() {
    return *internal_default_instance();
  }
  static inline const IronMace_Token* internal_default_instance() {
    return reinterpret_cast<const IronMace_Token*>(
        &_IronMace_Token_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(IronMace_Token& a, IronMace_Token& b) { a.Swap(&b); }
  inline void Swap(IronMace_Token* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IronMace_Token* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IronMace_Token* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<IronMace_Token>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IronMace_Token& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IronMace_Token& from) { IronMace_Token::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IronMace_Token* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DC.Packet.IronMace_Token"; }

 protected:
  explicit IronMace_Token(::google::protobuf::Arena* arena);
  IronMace_Token(::google::protobuf::Arena* arena, const IronMace_Token& from);
  IronMace_Token(::google::protobuf::Arena* arena, IronMace_Token&& from) noexcept
      : IronMace_Token(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLoginIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string loginId = 1;
  void clear_loginid() ;
  const std::string& loginid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_loginid(Arg_&& arg, Args_... args);
  std::string* mutable_loginid();
  PROTOBUF_NODISCARD std::string* release_loginid();
  void set_allocated_loginid(std::string* value);

  private:
  const std::string& _internal_loginid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loginid(
      const std::string& value);
  std::string* _internal_mutable_loginid();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:DC.Packet.IronMace_Token)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IronMace_Token_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IronMace_Token& from_msg);
    ::google::protobuf::internal::ArenaStringPtr loginid_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IronMace_2eproto;
};
// -------------------------------------------------------------------

class IronMace_Login_Res final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DC.Packet.IronMace_Login_Res) */ {
 public:
  inline IronMace_Login_Res() : IronMace_Login_Res(nullptr) {}
  ~IronMace_Login_Res() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IronMace_Login_Res(
      ::google::protobuf::internal::ConstantInitialized);

  inline IronMace_Login_Res(const IronMace_Login_Res& from) : IronMace_Login_Res(nullptr, from) {}
  inline IronMace_Login_Res(IronMace_Login_Res&& from) noexcept
      : IronMace_Login_Res(nullptr, std::move(from)) {}
  inline IronMace_Login_Res& operator=(const IronMace_Login_Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline IronMace_Login_Res& operator=(IronMace_Login_Res&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IronMace_Login_Res& default_instance() {
    return *internal_default_instance();
  }
  static inline const IronMace_Login_Res* internal_default_instance() {
    return reinterpret_cast<const IronMace_Login_Res*>(
        &_IronMace_Login_Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(IronMace_Login_Res& a, IronMace_Login_Res& b) { a.Swap(&b); }
  inline void Swap(IronMace_Login_Res* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IronMace_Login_Res* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IronMace_Login_Res* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<IronMace_Login_Res>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IronMace_Login_Res& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IronMace_Login_Res& from) { IronMace_Login_Res::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IronMace_Login_Res* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DC.Packet.IronMace_Login_Res"; }

 protected:
  explicit IronMace_Login_Res(::google::protobuf::Arena* arena);
  IronMace_Login_Res(::google::protobuf::Arena* arena, const IronMace_Login_Res& from);
  IronMace_Login_Res(::google::protobuf::Arena* arena, IronMace_Login_Res&& from) noexcept
      : IronMace_Login_Res(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using IronMace_Login_Result = IronMace_Login_Res_IronMace_Login_Result;
  static constexpr IronMace_Login_Result NONE = IronMace_Login_Res_IronMace_Login_Result_NONE;
  static constexpr IronMace_Login_Result SUCCESS = IronMace_Login_Res_IronMace_Login_Result_SUCCESS;
  static constexpr IronMace_Login_Result FAIL_NOT_FOUND_ACCOUNT = IronMace_Login_Res_IronMace_Login_Result_FAIL_NOT_FOUND_ACCOUNT;
  static constexpr IronMace_Login_Result FAIL_WRONG_PASSWORD = IronMace_Login_Res_IronMace_Login_Result_FAIL_WRONG_PASSWORD;
  static inline bool IronMace_Login_Result_IsValid(int value) {
    return IronMace_Login_Res_IronMace_Login_Result_IsValid(value);
  }
  static constexpr IronMace_Login_Result IronMace_Login_Result_MIN = IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Result_MIN;
  static constexpr IronMace_Login_Result IronMace_Login_Result_MAX = IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Result_MAX;
  static constexpr int IronMace_Login_Result_ARRAYSIZE = IronMace_Login_Res_IronMace_Login_Result_IronMace_Login_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* IronMace_Login_Result_descriptor() {
    return IronMace_Login_Res_IronMace_Login_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& IronMace_Login_Result_Name(T value) {
    return IronMace_Login_Res_IronMace_Login_Result_Name(value);
  }
  static inline bool IronMace_Login_Result_Parse(absl::string_view name, IronMace_Login_Result* value) {
    return IronMace_Login_Res_IronMace_Login_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kErrorMessageFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string errorMessage = 2;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // uint32 result = 1;
  void clear_result() ;
  ::uint32_t result() const;
  void set_result(::uint32_t value);

  private:
  ::uint32_t _internal_result() const;
  void _internal_set_result(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:DC.Packet.IronMace_Login_Res)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IronMace_Login_Res_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IronMace_Login_Res& from_msg);
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::uint32_t result_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IronMace_2eproto;
};
// -------------------------------------------------------------------

class IronMace_Login final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:DC.Packet.IronMace_Login) */ {
 public:
  inline IronMace_Login() : IronMace_Login(nullptr) {}
  ~IronMace_Login() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IronMace_Login(
      ::google::protobuf::internal::ConstantInitialized);

  inline IronMace_Login(const IronMace_Login& from) : IronMace_Login(nullptr, from) {}
  inline IronMace_Login(IronMace_Login&& from) noexcept
      : IronMace_Login(nullptr, std::move(from)) {}
  inline IronMace_Login& operator=(const IronMace_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline IronMace_Login& operator=(IronMace_Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IronMace_Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const IronMace_Login* internal_default_instance() {
    return reinterpret_cast<const IronMace_Login*>(
        &_IronMace_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(IronMace_Login& a, IronMace_Login& b) { a.Swap(&b); }
  inline void Swap(IronMace_Login* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IronMace_Login* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IronMace_Login* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<IronMace_Login>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IronMace_Login& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IronMace_Login& from) { IronMace_Login::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IronMace_Login* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "DC.Packet.IronMace_Login"; }

 protected:
  explicit IronMace_Login(::google::protobuf::Arena* arena);
  IronMace_Login(::google::protobuf::Arena* arena, const IronMace_Login& from);
  IronMace_Login(::google::protobuf::Arena* arena, IronMace_Login&& from) noexcept
      : IronMace_Login(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLoginIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string loginId = 1;
  void clear_loginid() ;
  const std::string& loginid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_loginid(Arg_&& arg, Args_... args);
  std::string* mutable_loginid();
  PROTOBUF_NODISCARD std::string* release_loginid();
  void set_allocated_loginid(std::string* value);

  private:
  const std::string& _internal_loginid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loginid(
      const std::string& value);
  std::string* _internal_mutable_loginid();

  public:
  // string password = 2;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // @@protoc_insertion_point(class_scope:DC.Packet.IronMace_Login)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_IronMace_Login_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IronMace_Login& from_msg);
    ::google::protobuf::internal::ArenaStringPtr loginid_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IronMace_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IronMace_Login

// string loginId = 1;
inline void IronMace_Login::clear_loginid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.ClearToEmpty();
}
inline const std::string& IronMace_Login::loginid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Login.loginId)
  return _internal_loginid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IronMace_Login::set_loginid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Login.loginId)
}
inline std::string* IronMace_Login::mutable_loginid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_loginid();
  // @@protoc_insertion_point(field_mutable:DC.Packet.IronMace_Login.loginId)
  return _s;
}
inline const std::string& IronMace_Login::_internal_loginid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.loginid_.Get();
}
inline void IronMace_Login::_internal_set_loginid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.Set(value, GetArena());
}
inline std::string* IronMace_Login::_internal_mutable_loginid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.loginid_.Mutable( GetArena());
}
inline std::string* IronMace_Login::release_loginid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DC.Packet.IronMace_Login.loginId)
  return _impl_.loginid_.Release();
}
inline void IronMace_Login::set_allocated_loginid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.loginid_.IsDefault()) {
          _impl_.loginid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DC.Packet.IronMace_Login.loginId)
}

// string password = 2;
inline void IronMace_Login::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& IronMace_Login::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Login.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IronMace_Login::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Login.password)
}
inline std::string* IronMace_Login::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:DC.Packet.IronMace_Login.password)
  return _s;
}
inline const std::string& IronMace_Login::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void IronMace_Login::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* IronMace_Login::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* IronMace_Login::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DC.Packet.IronMace_Login.password)
  return _impl_.password_.Release();
}
inline void IronMace_Login::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DC.Packet.IronMace_Login.password)
}

// -------------------------------------------------------------------

// IronMace_Login_Res

// uint32 result = 1;
inline void IronMace_Login_Res::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0u;
}
inline ::uint32_t IronMace_Login_Res::result() const {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Login_Res.result)
  return _internal_result();
}
inline void IronMace_Login_Res::set_result(::uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Login_Res.result)
}
inline ::uint32_t IronMace_Login_Res::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void IronMace_Login_Res::_internal_set_result(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// string errorMessage = 2;
inline void IronMace_Login_Res::clear_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& IronMace_Login_Res::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Login_Res.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IronMace_Login_Res::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Login_Res.errorMessage)
}
inline std::string* IronMace_Login_Res::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:DC.Packet.IronMace_Login_Res.errorMessage)
  return _s;
}
inline const std::string& IronMace_Login_Res::_internal_errormessage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errormessage_.Get();
}
inline void IronMace_Login_Res::_internal_set_errormessage(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* IronMace_Login_Res::_internal_mutable_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* IronMace_Login_Res::release_errormessage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DC.Packet.IronMace_Login_Res.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void IronMace_Login_Res::set_allocated_errormessage(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errormessage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errormessage_.IsDefault()) {
          _impl_.errormessage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DC.Packet.IronMace_Login_Res.errorMessage)
}

// -------------------------------------------------------------------

// IronMace_Token

// string loginId = 1;
inline void IronMace_Token::clear_loginid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.ClearToEmpty();
}
inline const std::string& IronMace_Token::loginid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Token.loginId)
  return _internal_loginid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IronMace_Token::set_loginid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Token.loginId)
}
inline std::string* IronMace_Token::mutable_loginid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_loginid();
  // @@protoc_insertion_point(field_mutable:DC.Packet.IronMace_Token.loginId)
  return _s;
}
inline const std::string& IronMace_Token::_internal_loginid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.loginid_.Get();
}
inline void IronMace_Token::_internal_set_loginid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.Set(value, GetArena());
}
inline std::string* IronMace_Token::_internal_mutable_loginid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.loginid_.Mutable( GetArena());
}
inline std::string* IronMace_Token::release_loginid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DC.Packet.IronMace_Token.loginId)
  return _impl_.loginid_.Release();
}
inline void IronMace_Token::set_allocated_loginid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.loginid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.loginid_.IsDefault()) {
          _impl_.loginid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DC.Packet.IronMace_Token.loginId)
}

// string password = 2;
inline void IronMace_Token::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& IronMace_Token::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Token.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IronMace_Token::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Token.password)
}
inline std::string* IronMace_Token::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:DC.Packet.IronMace_Token.password)
  return _s;
}
inline const std::string& IronMace_Token::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void IronMace_Token::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* IronMace_Token::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* IronMace_Token::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DC.Packet.IronMace_Token.password)
  return _impl_.password_.Release();
}
inline void IronMace_Token::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DC.Packet.IronMace_Token.password)
}

// -------------------------------------------------------------------

// IronMace_Token_Res

// string token = 2;
inline void IronMace_Token_Res::clear_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.ClearToEmpty();
}
inline const std::string& IronMace_Token_Res::token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:DC.Packet.IronMace_Token_Res.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IronMace_Token_Res::set_token(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:DC.Packet.IronMace_Token_Res.token)
}
inline std::string* IronMace_Token_Res::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:DC.Packet.IronMace_Token_Res.token)
  return _s;
}
inline const std::string& IronMace_Token_Res::_internal_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.token_.Get();
}
inline void IronMace_Token_Res::_internal_set_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.Set(value, GetArena());
}
inline std::string* IronMace_Token_Res::_internal_mutable_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.token_.Mutable( GetArena());
}
inline std::string* IronMace_Token_Res::release_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:DC.Packet.IronMace_Token_Res.token)
  return _impl_.token_.Release();
}
inline void IronMace_Token_Res::set_allocated_token(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DC.Packet.IronMace_Token_Res.token)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Packet
}  // namespace DC


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::DC::Packet::IronMace_Login_Res_IronMace_Login_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::DC::Packet::IronMace_Login_Res_IronMace_Login_Result>() {
  return ::DC::Packet::IronMace_Login_Res_IronMace_Login_Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_IronMace_2eproto_2epb_2eh
